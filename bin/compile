#!/bin/bash -e
# bin/compile <build-dir> <cache-dir>

# Exit if any subcommand fails
set -e

BUILD_DIR=$1
CACHE_DIR=$2
ENV_DIR=$3
CURRENT_DIR=$PWD

TRANSCRYPT_ENV_FILE="$ENV_DIR/TRANSCRYPT_CMD"

printf "\nBUILD_DIR: $BUILD_DIR"
printf "\nCACHE_DIR: $CACHE_DIR"
printf "\nENV_DIR: $ENV_DIR"
printf "\nCURRENT_DIR: $CURRENT_DIR"
printf "\nTRANSCRYPT_ENV_FILE: $TRANSCRYPT_ENV_FILE"

cat $BUILD_DIR/.env

if [ ! -f $TRANSCRYPT_ENV_FILE ]; then
    printf "\n-----> ERROR: Please set TRANSCRYPT_CMD. You can get the command by running in your project directory: transcrypt --display \n\n"
    exit 1
fi

TRANSCRYPT_CMD=$(cat $TRANSCRYPT_ENV_FILE)

printf "\nTRANSCRYPT_CMD: $TRANSCRYPT_CMD"

printf "\n-----> Successfully retrieved TRANSCRYPT_CMD from ENV var"

mkdir -p $CACHE_DIR
cd $CACHE_DIR
if [ -d "transcrypt" ]; then
    cd transcrypt
    git fetch --quiet
    git pull --quiet
else
    git clone --quiet https://github.com/elasticdog/transcrypt.git
fi

cd $BUILD_DIR
# It doesn't have git, so initialize
git init . --quiet

# Install transcrypt, its helper utils, and password/cipher
printf "\n-----> Installing and configuring transcrypt\n\n"
# cd $CURRENT_DIR
printf "\neval $CACHE_DIR/transcrypt/$TRANSCRYPT_CMD -y\n"
eval $CACHE_DIR/transcrypt/$TRANSCRYPT_CMD -y

printf "\n-----> All transcrypted files decrypted!\n\n"

cat $BUILD_DIR/.env
